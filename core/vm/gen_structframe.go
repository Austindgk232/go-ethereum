// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package vm

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*structFrameMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s StructFrame) MarshalJSON() ([]byte, error) {
	type StructFrame struct {
		Type    string                `json:"type"`
		From    common.Address        `json:"from"`
		To      common.Address        `json:"to"`
		Input   hexutil.Bytes         `json:"input"`
		Gas     math.HexOrDecimal64   `json:"gas"`
		Value   *math.HexOrDecimal256 `json:"value"`
		GasUsed uint64                `json:"-"`
		Output  []byte                `json:"-"`
	}
	var enc StructFrame
	enc.Type = s.Type
	enc.From = s.From
	enc.To = s.To
	enc.Input = s.Input
	enc.Gas = math.HexOrDecimal64(s.Gas)
	enc.Value = (*math.HexOrDecimal256)(s.Value)
	enc.GasUsed = s.GasUsed
	enc.Output = s.Output
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *StructFrame) UnmarshalJSON(input []byte) error {
	type StructFrame struct {
		Type    *string               `json:"type"`
		From    *common.Address       `json:"from"`
		To      *common.Address       `json:"to"`
		Input   *hexutil.Bytes        `json:"input"`
		Gas     *math.HexOrDecimal64  `json:"gas"`
		Value   *math.HexOrDecimal256 `json:"value"`
		GasUsed *uint64               `json:"-"`
		Output  []byte                `json:"-"`
	}
	var dec StructFrame
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Type != nil {
		s.Type = *dec.Type
	}
	if dec.From != nil {
		s.From = *dec.From
	}
	if dec.To != nil {
		s.To = *dec.To
	}
	if dec.Input != nil {
		s.Input = *dec.Input
	}
	if dec.Gas != nil {
		s.Gas = uint64(*dec.Gas)
	}
	if dec.Value != nil {
		s.Value = (*big.Int)(dec.Value)
	}
	if dec.GasUsed != nil {
		s.GasUsed = *dec.GasUsed
	}
	if dec.Output != nil {
		s.Output = dec.Output
	}
	return nil
}
